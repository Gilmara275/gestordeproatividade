# app.py
from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, Email, Length, EqualTo
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)

# Modelo de Usuário
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)

# Formulário de Cadastro
class RegistrationForm(FlaskForm):
    name = StringField('Nome', validators=[DataRequired('O nome é obrigatório')])
    email = StringField('Email', validators=[
        DataRequired('O email é obrigatório'),
        Email('Formato de email inválido')
    ])
    password = PasswordField('Senha', validators=[
        DataRequired('A senha é obrigatória'),
        Length(min=8, message='A senha deve ter pelo menos 8 caracteres'),
        EqualTo('confirm_password', message='As senhas não coincidem')
    ])
    confirm_password = PasswordField('Confirme a Senha')
    submit = SubmitField('Cadastrar')

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    
    if form.validate_on_submit():
        try:
            hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
            
            user = User(
                name=form.name.data,
                email=form.email.data,
                password=hashed_password
            )
            
            db.session.add(user)
            db.session.commit()
            
            flash('Cadastro realizado com sucesso! Redirecionando...', 'success')
            return redirect(url_for('login'))
            
        except Exception as e:
            db.session.rollback()
            if 'unique constraint' in str(e).lower():
                flash('Este email já está cadastrado', 'danger')
            else:
                flash('Erro no servidor. Tente novamente mais tarde.', 'danger')
    
    elif request.method == 'POST':
        flash('Por favor, corrija os erros no formulário', 'danger')
    
    return render_template('register.html', form=form)

@app.route('/login')
def login():
    return render_template('login.html')

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)


<!DOCTYPE html>
<html>
<head>
    <title>Cadastro</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <h2 class="mb-4">Cadastro</h2>
                
                {% with messages = get_flashed_messages(with_categories=true) %}
                    {% if messages %}
                        {% for category, message in messages %}
                            <div class="alert alert-{{ category }}">
                                {{ message }}
                            </div>
                        {% endfor %}
                    {% endif %}
                {% endwith %}

                <form method="POST">
                    {{ form.hidden_tag() }}
                    
                    <div class="form-group">
                        {{ form.name.label }}
                        {{ form.name(class="form-control") }}
                        {% if form.name.errors %}
                            <div class="text-danger">
                                {% for error in form.name.errors %}
                                    <small>{{ error }}</small>
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>
                    
                    <div class="form-group">
                        {{ form.email.label }}
                        {{ form.email(class="form-control") }}
                        {% if form.email.errors %}
                            <div class="text-danger">
                                {% for error in form.email.errors %}
                                    <small>{{ error }}</small>
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>
                    
                    <div class="form-group">
                        {{ form.password.label }}
                        {{ form.password(class="form-control") }}
                        {% if form.password.errors %}
                            <div class="text-danger">
                                {% for error in form.password.errors %}
                                    <small>{{ error }}</small>
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>
                    
                    <div class="form-group">
                        {{ form.confirm_password.label }}
                        {{ form.confirm_password(class="form-control") }}
                    </div>
                    
                    {{ form.submit(class="btn btn-primary") }}
                </form>
            </div>
        </div>
    </div>
</body>
</html>

<!-- Similar ao register.html com formulário de login -->

SECRET_KEY=sua_chave_secreta_aqui
DATABASE_URL=sqlite:///database.db  # ou sua URL do PostgreSQL/MySQL

flask
flask-sqlalchemy
flask-bcrypt
flask-wtf
python-dotenv
      
